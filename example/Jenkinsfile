@Library("cem-jenkins-lib") _

pipeline {
    agent any
    
    /*******************************
     *  This pipeline will connect to CEM to get accounts, get a list of entities from the 1st accounts/workspaces, 
     *  get list out the details, recommendations & remediation for the 1st entity retreived 
     * 
     *  Environment variables CEM_ORG & CEM_APIKEY should be set for automation
     *  User will be asked to input them if they are not avaliable
     *  Conjur should be used to secure them in production environment
     */
    
    // Uncomment & update the following lines for quick demo, not for production
    //environment {
    //    CEM_ORG = '<Your CEM Organization>'
    //    CEM_APIKEY = '<Your CEM API Access Key>'
    //}

    stages {
        stage('Check CEM settings') {
            when {
                anyOf {
                    expression { env.CEM_ORG==null }
                    expression { env.CEM_APIKEY==null }
                }
            }
            steps {
                timeout(time: 30, unit: 'MINUTES') {
                    script {
                        def THE_INPUT = input message: "Please enter your CEM settings",
                            parameters: [
                                string(name: 'ORG', defaultValue: env.CEM_ORG, description: 'CEM Organization'),
                                password(name: 'APIKEY', defaultValueAsSecret: env.CEM_APIKEY, description: 'API Key generated by CEM')
                            ]
                        env.CEM_ORG = THE_INPUT.ORG
                        env.CEM_APIKEY = THE_INPUT.APIKEY
                    }
                }
            }
        }
        stage('Get Accounts') {
            steps {
                script {
                    def result = cemGetAccounts()
                    println (result.data.size() )
                    for (platform in result.data) {
                       println("Platform: $platform.platform")
                       platform.accounts.each {
                           println("workspace id: ${it.workspace_id}, status: ${it.workspace_status}")
                       }
                       
                       if (!env.demo_platform) { env.demo_platform= "$platform.platform" }
                    }
                }
            }
        }
        stage('Get Entities') {
            steps {
                script {
                    def result = cemGetEntities(platform: env.demo_platform)
                    if (result) {
                        println("total no of entities: " + result.hits.size() )
                        result.hits.each {
                            println "Name: $it.entityName, Score: $it.riskTotalScore"
                            
                           if (!env.demo_accountId) { env.demo_accountId= "$it.accountId" }
                           if (!env.demo_entityId) { env.demo_entityId= "$it.entityId" }
                        }
                    }
                }
            }
        }
        stage('Get Entity Details') {
            steps {
                script {
                    def result = cemGetEntityDetails(platform: env.demo_platform, accountId: env.demo_accountId, entityId: env.demo_entityId)
                    
                    if (result) {
                        println "Name: $result.entity_name, Score: $result.exposure_level"
                    }
                }
            }
        }
        stage('Get Recommendations') {
            steps {
                script {
                    def result = cemGetRecommendations(platform: env.demo_platform, accountId: env.demo_accountId, entityId: env.demo_entityId)
                    
                    if (result) {
                        println("Recommendations of $result.entity_id")
                        result.recommendations.active_recommendations.each {
                            println "$it"
                        }
                    }
                }
            }
        }
        stage('Get Remediations') {
            steps {
                script {
                    def result = cemGetRemediations(platform: env.demo_platform, accountId: env.demo_accountId, entityId: env.demo_entityId)
                    
                    if (result) {
                        println("Remediations of $result.entityId")
                        result.remediations.each {
                            println("$it.UN_USED_PERMISSIONS.LEAST_PRIVILEGE.data")
                        }
                    }
                }
            }
        }
        
    }
}
